Class {
	#name : #CppHeaderWriter,
	#superclass : #Object,
	#instVars : [
		'stream',
		'project'
	],
	#category : #'PST-Building'
}

{ #category : #generating }
CppHeaderWriter class >> generateCppHeaders [
	" 
	self generateCppHeaders
	"

	<example>
	| kernel |
	kernel := ProjectSpec new
		name: 'kernel';
		path: '../src/kernel' asFileReference;
		load.
	'../c/pst-kernel-classes.h' asFileReference
		writeStreamDo: [ :stream | 
			stream truncate.
			self new
				project: kernel;
				stream: stream;
				writeAll ]
]

{ #category : #accessing }
CppHeaderWriter >> project: anObject [
	project := anObject
]

{ #category : #accessing }
CppHeaderWriter >> stream: anObject [
	stream := anObject
]

{ #category : #writing }
CppHeaderWriter >> writeAll [
	self
		writePrologue;
		writeAstcodeNodeTypes;
		writeAstcodeBindingTypes;
		writeClassStructs;
		writeEpilogue
]

{ #category : #writing }
CppHeaderWriter >> writeAstcodeBindingTypes [
	self writePoolAsEnum: AstBindingTypes.
]

{ #category : #writing }
CppHeaderWriter >> writeAstcodeNodeTypes [
self writePoolAsEnum: AstNodeTypes
]

{ #category : #writing }
CppHeaderWriter >> writeClass: class [
	| ivars cname |
	stream
		nextPutAll: 'class ';
		nextPutAll: class name.
	class superclass
		ifNotNil: [ :s | 
			stream
				nextPutAll: ' : public ';
				nextPutAll: s name ].
	ivars := class instVars.
	ivars isEmpty
		ifTrue: [ ^ stream
				nextPutAll: ' {};';
				cr;
				cr ].
	stream
		cr;
		nextPut: ${;
		cr;
		nextPutAll: 'public:';
		cr.
	ivars
		do: [ :ivar | 
			cname := ivar = 'class' ifTrue: [ 'klass' ] ifFalse: [ ivar ].
			stream
				tab;
				nextPutAll: 'oop_t *';
				nextPutAll: cname;
				nextPut: $;;
				cr ].
	stream
		nextPutAll: '};';
		cr;
		cr
]

{ #category : #writing }
CppHeaderWriter >> writeClassStructs [
	project classes do: [:class | self writeClass: class ]
]

{ #category : #writing }
CppHeaderWriter >> writeEpilogue [
	stream
		nextPutAll: '} // namespace pst';
		cr;
		cr;
		nextPutAll: '#endif // ~ _PST_CLASSES_H_';
		cr;
		cr
]

{ #category : #writing }
CppHeaderWriter >> writePoolAsEnum: aSharedPool [
	| assocs name value |
	stream
		nextPutAll: 'enum '; nextPutAll: aSharedPool name;
		cr;
		nextPut: ${.
	assocs := aSharedPool classPool associations sort: [ :a :b | a value < b value ].
	assocs do: [ :assoc | name := assoc key. value := assoc value.
			stream
				cr;
				tab;
				nextPutAll: name;
				nextPutAll: ' = ';
				nextPutAll: value printString;
				nextPut: $; ].
	stream
		cr;
		nextPutAll: '};';
		cr;
		cr
]

{ #category : #writing }
CppHeaderWriter >> writePrologue [
	stream
		nextPutAll: '#ifndef _PST_CLASSES_H_';
		cr;
		nextPutAll: '#define _PST_CLASSES_H_';
		cr;
		cr;
		nextPutAll: '#include "pst.h"';
		nextPutAll:
			'

/** 
 *  this is an AUTOGENERATED C++ interface to the structure of
 *  classes present in the pst image
**/

namespace pst
{

'
]
